// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1  &&  1  >=  1 

 template std::vector<std::array<Point< 1 >,  1  + 1>>
 compute_intersection_of_cells< 1 ,  1 ,  1 >(
 const typename Triangulation< 1 ,  1 >::cell_iterator &cell0,
 const typename Triangulation< 1 ,  1 >::cell_iterator &cell1,
 const Mapping< 1 ,  1 > & mapping0,
 const Mapping< 1 ,  1 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  2  &&  1  >=  1 

 template std::vector<std::array<Point< 2 >,  1  + 1>>
 compute_intersection_of_cells< 1 ,  1 ,  2 >(
 const typename Triangulation< 1 ,  2 >::cell_iterator &cell0,
 const typename Triangulation< 1 ,  2 >::cell_iterator &cell1,
 const Mapping< 1 ,  2 > & mapping0,
 const Mapping< 1 ,  2 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  3  &&  1  >=  1 

 template std::vector<std::array<Point< 3 >,  1  + 1>>
 compute_intersection_of_cells< 1 ,  1 ,  3 >(
 const typename Triangulation< 1 ,  3 >::cell_iterator &cell0,
 const typename Triangulation< 1 ,  3 >::cell_iterator &cell1,
 const Mapping< 1 ,  3 > & mapping0,
 const Mapping< 1 ,  3 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  1  <=  1  &&  1  >=  2 

 template std::vector<std::array<Point< 1 >,  2  + 1>>
 compute_intersection_of_cells< 1 ,  2 ,  1 >(
 const typename Triangulation< 1 ,  1 >::cell_iterator &cell0,
 const typename Triangulation< 2 ,  1 >::cell_iterator &cell1,
 const Mapping< 1 ,  1 > & mapping0,
 const Mapping< 2 ,  1 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  1  <=  2  &&  1  >=  2 

 template std::vector<std::array<Point< 2 >,  2  + 1>>
 compute_intersection_of_cells< 1 ,  2 ,  2 >(
 const typename Triangulation< 1 ,  2 >::cell_iterator &cell0,
 const typename Triangulation< 2 ,  2 >::cell_iterator &cell1,
 const Mapping< 1 ,  2 > & mapping0,
 const Mapping< 2 ,  2 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  1  <=  3  &&  1  >=  2 

 template std::vector<std::array<Point< 3 >,  2  + 1>>
 compute_intersection_of_cells< 1 ,  2 ,  3 >(
 const typename Triangulation< 1 ,  3 >::cell_iterator &cell0,
 const typename Triangulation< 2 ,  3 >::cell_iterator &cell1,
 const Mapping< 1 ,  3 > & mapping0,
 const Mapping< 2 ,  3 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  1  <=  1  &&  1  >=  3 

 template std::vector<std::array<Point< 1 >,  3  + 1>>
 compute_intersection_of_cells< 1 ,  3 ,  1 >(
 const typename Triangulation< 1 ,  1 >::cell_iterator &cell0,
 const typename Triangulation< 3 ,  1 >::cell_iterator &cell1,
 const Mapping< 1 ,  1 > & mapping0,
 const Mapping< 3 ,  1 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  1  <=  2  &&  1  >=  3 

 template std::vector<std::array<Point< 2 >,  3  + 1>>
 compute_intersection_of_cells< 1 ,  3 ,  2 >(
 const typename Triangulation< 1 ,  2 >::cell_iterator &cell0,
 const typename Triangulation< 3 ,  2 >::cell_iterator &cell1,
 const Mapping< 1 ,  2 > & mapping0,
 const Mapping< 3 ,  2 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  1  <=  3  &&  1  >=  3 

 template std::vector<std::array<Point< 3 >,  3  + 1>>
 compute_intersection_of_cells< 1 ,  3 ,  3 >(
 const typename Triangulation< 1 ,  3 >::cell_iterator &cell0,
 const typename Triangulation< 3 ,  3 >::cell_iterator &cell1,
 const Mapping< 1 ,  3 > & mapping0,
 const Mapping< 3 ,  3 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  2  <=  1  &&  2  >=  1 

 template std::vector<std::array<Point< 1 >,  1  + 1>>
 compute_intersection_of_cells< 2 ,  1 ,  1 >(
 const typename Triangulation< 2 ,  1 >::cell_iterator &cell0,
 const typename Triangulation< 1 ,  1 >::cell_iterator &cell1,
 const Mapping< 2 ,  1 > & mapping0,
 const Mapping< 1 ,  1 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  2  <=  2  &&  2  >=  1 

 template std::vector<std::array<Point< 2 >,  1  + 1>>
 compute_intersection_of_cells< 2 ,  1 ,  2 >(
 const typename Triangulation< 2 ,  2 >::cell_iterator &cell0,
 const typename Triangulation< 1 ,  2 >::cell_iterator &cell1,
 const Mapping< 2 ,  2 > & mapping0,
 const Mapping< 1 ,  2 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  2  <=  3  &&  2  >=  1 

 template std::vector<std::array<Point< 3 >,  1  + 1>>
 compute_intersection_of_cells< 2 ,  1 ,  3 >(
 const typename Triangulation< 2 ,  3 >::cell_iterator &cell0,
 const typename Triangulation< 1 ,  3 >::cell_iterator &cell1,
 const Mapping< 2 ,  3 > & mapping0,
 const Mapping< 1 ,  3 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
#if  2  <=  1  &&  2  >=  2 

 template std::vector<std::array<Point< 1 >,  2  + 1>>
 compute_intersection_of_cells< 2 ,  2 ,  1 >(
 const typename Triangulation< 2 ,  1 >::cell_iterator &cell0,
 const typename Triangulation< 2 ,  1 >::cell_iterator &cell1,
 const Mapping< 2 ,  1 > & mapping0,
 const Mapping< 2 ,  1 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
#if  2  <=  2  &&  2  >=  2 

 template std::vector<std::array<Point< 2 >,  2  + 1>>
 compute_intersection_of_cells< 2 ,  2 ,  2 >(
 const typename Triangulation< 2 ,  2 >::cell_iterator &cell0,
 const typename Triangulation< 2 ,  2 >::cell_iterator &cell1,
 const Mapping< 2 ,  2 > & mapping0,
 const Mapping< 2 ,  2 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
#if  2  <=  3  &&  2  >=  2 

 template std::vector<std::array<Point< 3 >,  2  + 1>>
 compute_intersection_of_cells< 2 ,  2 ,  3 >(
 const typename Triangulation< 2 ,  3 >::cell_iterator &cell0,
 const typename Triangulation< 2 ,  3 >::cell_iterator &cell1,
 const Mapping< 2 ,  3 > & mapping0,
 const Mapping< 2 ,  3 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
#if  2  <=  1  &&  2  >=  3 

 template std::vector<std::array<Point< 1 >,  3  + 1>>
 compute_intersection_of_cells< 2 ,  3 ,  1 >(
 const typename Triangulation< 2 ,  1 >::cell_iterator &cell0,
 const typename Triangulation< 3 ,  1 >::cell_iterator &cell1,
 const Mapping< 2 ,  1 > & mapping0,
 const Mapping< 3 ,  1 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
#if  2  <=  2  &&  2  >=  3 

 template std::vector<std::array<Point< 2 >,  3  + 1>>
 compute_intersection_of_cells< 2 ,  3 ,  2 >(
 const typename Triangulation< 2 ,  2 >::cell_iterator &cell0,
 const typename Triangulation< 3 ,  2 >::cell_iterator &cell1,
 const Mapping< 2 ,  2 > & mapping0,
 const Mapping< 3 ,  2 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
#if  2  <=  3  &&  2  >=  3 

 template std::vector<std::array<Point< 3 >,  3  + 1>>
 compute_intersection_of_cells< 2 ,  3 ,  3 >(
 const typename Triangulation< 2 ,  3 >::cell_iterator &cell0,
 const typename Triangulation< 3 ,  3 >::cell_iterator &cell1,
 const Mapping< 2 ,  3 > & mapping0,
 const Mapping< 3 ,  3 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
#if  3  <=  1  &&  3  >=  1 

 template std::vector<std::array<Point< 1 >,  1  + 1>>
 compute_intersection_of_cells< 3 ,  1 ,  1 >(
 const typename Triangulation< 3 ,  1 >::cell_iterator &cell0,
 const typename Triangulation< 1 ,  1 >::cell_iterator &cell1,
 const Mapping< 3 ,  1 > & mapping0,
 const Mapping< 1 ,  1 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
#if  3  <=  2  &&  3  >=  1 

 template std::vector<std::array<Point< 2 >,  1  + 1>>
 compute_intersection_of_cells< 3 ,  1 ,  2 >(
 const typename Triangulation< 3 ,  2 >::cell_iterator &cell0,
 const typename Triangulation< 1 ,  2 >::cell_iterator &cell1,
 const Mapping< 3 ,  2 > & mapping0,
 const Mapping< 1 ,  2 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
#if  3  <=  3  &&  3  >=  1 

 template std::vector<std::array<Point< 3 >,  1  + 1>>
 compute_intersection_of_cells< 3 ,  1 ,  3 >(
 const typename Triangulation< 3 ,  3 >::cell_iterator &cell0,
 const typename Triangulation< 1 ,  3 >::cell_iterator &cell1,
 const Mapping< 3 ,  3 > & mapping0,
 const Mapping< 1 ,  3 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
#if  3  <=  1  &&  3  >=  2 

 template std::vector<std::array<Point< 1 >,  2  + 1>>
 compute_intersection_of_cells< 3 ,  2 ,  1 >(
 const typename Triangulation< 3 ,  1 >::cell_iterator &cell0,
 const typename Triangulation< 2 ,  1 >::cell_iterator &cell1,
 const Mapping< 3 ,  1 > & mapping0,
 const Mapping< 2 ,  1 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
#if  3  <=  2  &&  3  >=  2 

 template std::vector<std::array<Point< 2 >,  2  + 1>>
 compute_intersection_of_cells< 3 ,  2 ,  2 >(
 const typename Triangulation< 3 ,  2 >::cell_iterator &cell0,
 const typename Triangulation< 2 ,  2 >::cell_iterator &cell1,
 const Mapping< 3 ,  2 > & mapping0,
 const Mapping< 2 ,  2 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
#if  3  <=  3  &&  3  >=  2 

 template std::vector<std::array<Point< 3 >,  2  + 1>>
 compute_intersection_of_cells< 3 ,  2 ,  3 >(
 const typename Triangulation< 3 ,  3 >::cell_iterator &cell0,
 const typename Triangulation< 2 ,  3 >::cell_iterator &cell1,
 const Mapping< 3 ,  3 > & mapping0,
 const Mapping< 2 ,  3 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
#if  3  <=  1  &&  3  >=  3 

 template std::vector<std::array<Point< 1 >,  3  + 1>>
 compute_intersection_of_cells< 3 ,  3 ,  1 >(
 const typename Triangulation< 3 ,  1 >::cell_iterator &cell0,
 const typename Triangulation< 3 ,  1 >::cell_iterator &cell1,
 const Mapping< 3 ,  1 > & mapping0,
 const Mapping< 3 ,  1 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
#if  3  <=  2  &&  3  >=  3 

 template std::vector<std::array<Point< 2 >,  3  + 1>>
 compute_intersection_of_cells< 3 ,  3 ,  2 >(
 const typename Triangulation< 3 ,  2 >::cell_iterator &cell0,
 const typename Triangulation< 3 ,  2 >::cell_iterator &cell1,
 const Mapping< 3 ,  2 > & mapping0,
 const Mapping< 3 ,  2 > & mapping1,
 const double tol);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
#if  3  <=  3  &&  3  >=  3 

 template std::vector<std::array<Point< 3 >,  3  + 1>>
 compute_intersection_of_cells< 3 ,  3 ,  3 >(
 const typename Triangulation< 3 ,  3 >::cell_iterator &cell0,
 const typename Triangulation< 3 ,  3 >::cell_iterator &cell1,
 const Mapping< 3 ,  3 > & mapping0,
 const Mapping< 3 ,  3 > & mapping1,
 const double tol);

#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
