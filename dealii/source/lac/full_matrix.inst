// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
template class FullMatrix< double >;

 template void FullMatrix< double >::print(LogStream &,
 const unsigned int,
 const unsigned int) const;
 template void FullMatrix< double >::print(std::ostream &,
 const unsigned int,
 const unsigned int) const;

 template void FullMatrix< double >::copy_from<1>(const Tensor<2, 1> &,
 const unsigned int,
 const unsigned int,
 unsigned int,
 const unsigned int,
 const size_type,
 const size_type);

 template void FullMatrix< double >::copy_from<2>(const Tensor<2, 2> &,
 const unsigned int,
 const unsigned int,
 unsigned int,
 const unsigned int,
 const size_type,
 const size_type);

 template void FullMatrix< double >::copy_from<3>(const Tensor<2, 3> &,
 const unsigned int,
 const unsigned int,
 unsigned int,
 const unsigned int,
 const size_type,
 const size_type);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
template class FullMatrix< float >;

 template void FullMatrix< float >::print(LogStream &,
 const unsigned int,
 const unsigned int) const;
 template void FullMatrix< float >::print(std::ostream &,
 const unsigned int,
 const unsigned int) const;

 template void FullMatrix< float >::copy_from<1>(const Tensor<2, 1> &,
 const unsigned int,
 const unsigned int,
 unsigned int,
 const unsigned int,
 const size_type,
 const size_type);

 template void FullMatrix< float >::copy_from<2>(const Tensor<2, 2> &,
 const unsigned int,
 const unsigned int,
 unsigned int,
 const unsigned int,
 const size_type,
 const size_type);

 template void FullMatrix< float >::copy_from<3>(const Tensor<2, 3> &,
 const unsigned int,
 const unsigned int,
 unsigned int,
 const unsigned int,
 const size_type,
 const size_type);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
template void FullMatrix< double >::copy_to<1>(Tensor<2, 1> &,
 const size_type,
 const size_type,
 const size_type,
 const size_type,
 const unsigned int,
 const unsigned int) const;

 template void FullMatrix< double >::copy_to<2>(Tensor<2, 2> &,
 const size_type,
 const size_type,
 const size_type,
 const size_type,
 const unsigned int,
 const unsigned int) const;

 template void FullMatrix< double >::copy_to<3>(Tensor<2, 3> &,
 const size_type,
 const size_type,
 const size_type,
 const size_type,
 const unsigned int,
 const unsigned int) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
template void FullMatrix< float >::copy_to<1>(Tensor<2, 1> &,
 const size_type,
 const size_type,
 const size_type,
 const size_type,
 const unsigned int,
 const unsigned int) const;

 template void FullMatrix< float >::copy_to<2>(Tensor<2, 2> &,
 const size_type,
 const size_type,
 const size_type,
 const size_type,
 const unsigned int,
 const unsigned int) const;

 template void FullMatrix< float >::copy_to<3>(Tensor<2, 3> &,
 const size_type,
 const size_type,
 const size_type,
 const size_type,
 const unsigned int,
 const unsigned int) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
template FullMatrix< double > &FullMatrix< double >::operator=(
 const LAPACKFullMatrix< double > &);

 template void FullMatrix< double >::fill< double >(
 const FullMatrix< double > &, size_type, size_type, size_type, size_type);
 template void FullMatrix< double >::add< double >(const  double , const FullMatrix< double > &);
 template void FullMatrix< double >::add< double >(const  double ,
 const FullMatrix< double > &,
 const  double ,
 const FullMatrix< double > &);
 template void FullMatrix< double >::add< double >(const  double ,
 const FullMatrix< double > &,
 const  double ,
 const FullMatrix< double > &,
 const  double ,
 const FullMatrix< double > &);
 template void FullMatrix< double >::add< double >(
 const FullMatrix< double > &,  double , size_type, size_type, size_type, size_type);
 template void FullMatrix< double >::Tadd< double >(const  double , const FullMatrix< double > &);
 template void FullMatrix< double >::Tadd< double >(
 const FullMatrix< double > &,  double , size_type, size_type, size_type, size_type);
 template void FullMatrix< double >::equ< double >(const  double , const FullMatrix< double > &);
 template void FullMatrix< double >::equ< double >(const  double ,
 const FullMatrix< double > &,
 const  double ,
 const FullMatrix< double > &);
 template void FullMatrix< double >::equ< double >(const  double ,
 const FullMatrix< double > &,
 const  double ,
 const FullMatrix< double > &,
 const  double ,
 const FullMatrix< double > &);
 template void FullMatrix< double >::mmult< double >(FullMatrix< double > &,
 const FullMatrix< double > &,
 const bool) const;
 template void FullMatrix< double >::Tmmult< double >(FullMatrix< double > &,
 const FullMatrix< double > &,
 const bool) const;
 template void FullMatrix< double >::mTmult< double >(FullMatrix< double > &,
 const FullMatrix< double > &,
 const bool) const;
 template void FullMatrix< double >::TmTmult< double >(FullMatrix< double > &,
 const FullMatrix< double > &,
 const bool) const;
 template void FullMatrix< double >::invert< double >(const FullMatrix< double > &);

 template void FullMatrix< double >::left_invert< double >(const FullMatrix< double > &);
 template void FullMatrix< double >::right_invert< double >(const FullMatrix< double > &);

 template void FullMatrix< double >::fill_permutation< double >(
 const FullMatrix< double > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &);

 template void FullMatrix< double >::cholesky< double >(const FullMatrix< double > &);

 template void FullMatrix< double >::outer_product< double >(const Vector< double > &,
 const Vector< double > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
template FullMatrix< double > &FullMatrix< double >::operator=(
 const LAPACKFullMatrix< float > &);

 template void FullMatrix< double >::fill< float >(
 const FullMatrix< float > &, size_type, size_type, size_type, size_type);
 template void FullMatrix< double >::add< float >(const  double , const FullMatrix< float > &);
 template void FullMatrix< double >::add< float >(const  double ,
 const FullMatrix< float > &,
 const  double ,
 const FullMatrix< float > &);
 template void FullMatrix< double >::add< float >(const  double ,
 const FullMatrix< float > &,
 const  double ,
 const FullMatrix< float > &,
 const  double ,
 const FullMatrix< float > &);
 template void FullMatrix< double >::add< float >(
 const FullMatrix< float > &,  double , size_type, size_type, size_type, size_type);
 template void FullMatrix< double >::Tadd< float >(const  double , const FullMatrix< float > &);
 template void FullMatrix< double >::Tadd< float >(
 const FullMatrix< float > &,  double , size_type, size_type, size_type, size_type);
 template void FullMatrix< double >::equ< float >(const  double , const FullMatrix< float > &);
 template void FullMatrix< double >::equ< float >(const  double ,
 const FullMatrix< float > &,
 const  double ,
 const FullMatrix< float > &);
 template void FullMatrix< double >::equ< float >(const  double ,
 const FullMatrix< float > &,
 const  double ,
 const FullMatrix< float > &,
 const  double ,
 const FullMatrix< float > &);
 template void FullMatrix< double >::mmult< float >(FullMatrix< float > &,
 const FullMatrix< float > &,
 const bool) const;
 template void FullMatrix< double >::Tmmult< float >(FullMatrix< float > &,
 const FullMatrix< float > &,
 const bool) const;
 template void FullMatrix< double >::mTmult< float >(FullMatrix< float > &,
 const FullMatrix< float > &,
 const bool) const;
 template void FullMatrix< double >::TmTmult< float >(FullMatrix< float > &,
 const FullMatrix< float > &,
 const bool) const;
 template void FullMatrix< double >::invert< float >(const FullMatrix< float > &);

 template void FullMatrix< double >::left_invert< float >(const FullMatrix< float > &);
 template void FullMatrix< double >::right_invert< float >(const FullMatrix< float > &);

 template void FullMatrix< double >::fill_permutation< float >(
 const FullMatrix< float > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &);

 template void FullMatrix< double >::cholesky< float >(const FullMatrix< float > &);

 template void FullMatrix< double >::outer_product< float >(const Vector< float > &,
 const Vector< float > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
template FullMatrix< float > &FullMatrix< float >::operator=(
 const LAPACKFullMatrix< double > &);

 template void FullMatrix< float >::fill< double >(
 const FullMatrix< double > &, size_type, size_type, size_type, size_type);
 template void FullMatrix< float >::add< double >(const  float , const FullMatrix< double > &);
 template void FullMatrix< float >::add< double >(const  float ,
 const FullMatrix< double > &,
 const  float ,
 const FullMatrix< double > &);
 template void FullMatrix< float >::add< double >(const  float ,
 const FullMatrix< double > &,
 const  float ,
 const FullMatrix< double > &,
 const  float ,
 const FullMatrix< double > &);
 template void FullMatrix< float >::add< double >(
 const FullMatrix< double > &,  float , size_type, size_type, size_type, size_type);
 template void FullMatrix< float >::Tadd< double >(const  float , const FullMatrix< double > &);
 template void FullMatrix< float >::Tadd< double >(
 const FullMatrix< double > &,  float , size_type, size_type, size_type, size_type);
 template void FullMatrix< float >::equ< double >(const  float , const FullMatrix< double > &);
 template void FullMatrix< float >::equ< double >(const  float ,
 const FullMatrix< double > &,
 const  float ,
 const FullMatrix< double > &);
 template void FullMatrix< float >::equ< double >(const  float ,
 const FullMatrix< double > &,
 const  float ,
 const FullMatrix< double > &,
 const  float ,
 const FullMatrix< double > &);
 template void FullMatrix< float >::mmult< double >(FullMatrix< double > &,
 const FullMatrix< double > &,
 const bool) const;
 template void FullMatrix< float >::Tmmult< double >(FullMatrix< double > &,
 const FullMatrix< double > &,
 const bool) const;
 template void FullMatrix< float >::mTmult< double >(FullMatrix< double > &,
 const FullMatrix< double > &,
 const bool) const;
 template void FullMatrix< float >::TmTmult< double >(FullMatrix< double > &,
 const FullMatrix< double > &,
 const bool) const;
 template void FullMatrix< float >::invert< double >(const FullMatrix< double > &);

 template void FullMatrix< float >::left_invert< double >(const FullMatrix< double > &);
 template void FullMatrix< float >::right_invert< double >(const FullMatrix< double > &);

 template void FullMatrix< float >::fill_permutation< double >(
 const FullMatrix< double > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &);

 template void FullMatrix< float >::cholesky< double >(const FullMatrix< double > &);

 template void FullMatrix< float >::outer_product< double >(const Vector< double > &,
 const Vector< double > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
template FullMatrix< float > &FullMatrix< float >::operator=(
 const LAPACKFullMatrix< float > &);

 template void FullMatrix< float >::fill< float >(
 const FullMatrix< float > &, size_type, size_type, size_type, size_type);
 template void FullMatrix< float >::add< float >(const  float , const FullMatrix< float > &);
 template void FullMatrix< float >::add< float >(const  float ,
 const FullMatrix< float > &,
 const  float ,
 const FullMatrix< float > &);
 template void FullMatrix< float >::add< float >(const  float ,
 const FullMatrix< float > &,
 const  float ,
 const FullMatrix< float > &,
 const  float ,
 const FullMatrix< float > &);
 template void FullMatrix< float >::add< float >(
 const FullMatrix< float > &,  float , size_type, size_type, size_type, size_type);
 template void FullMatrix< float >::Tadd< float >(const  float , const FullMatrix< float > &);
 template void FullMatrix< float >::Tadd< float >(
 const FullMatrix< float > &,  float , size_type, size_type, size_type, size_type);
 template void FullMatrix< float >::equ< float >(const  float , const FullMatrix< float > &);
 template void FullMatrix< float >::equ< float >(const  float ,
 const FullMatrix< float > &,
 const  float ,
 const FullMatrix< float > &);
 template void FullMatrix< float >::equ< float >(const  float ,
 const FullMatrix< float > &,
 const  float ,
 const FullMatrix< float > &,
 const  float ,
 const FullMatrix< float > &);
 template void FullMatrix< float >::mmult< float >(FullMatrix< float > &,
 const FullMatrix< float > &,
 const bool) const;
 template void FullMatrix< float >::Tmmult< float >(FullMatrix< float > &,
 const FullMatrix< float > &,
 const bool) const;
 template void FullMatrix< float >::mTmult< float >(FullMatrix< float > &,
 const FullMatrix< float > &,
 const bool) const;
 template void FullMatrix< float >::TmTmult< float >(FullMatrix< float > &,
 const FullMatrix< float > &,
 const bool) const;
 template void FullMatrix< float >::invert< float >(const FullMatrix< float > &);

 template void FullMatrix< float >::left_invert< float >(const FullMatrix< float > &);
 template void FullMatrix< float >::right_invert< float >(const FullMatrix< float > &);

 template void FullMatrix< float >::fill_permutation< float >(
 const FullMatrix< float > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &);

 template void FullMatrix< float >::cholesky< float >(const FullMatrix< float > &);

 template void FullMatrix< float >::outer_product< float >(const Vector< float > &,
 const Vector< float > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
template void FullMatrix< double >::vmult< double >(Vector< double > &,
 const Vector< double > &,
 bool) const;
 template void FullMatrix< double >::Tvmult< double >(Vector< double > &,
 const Vector< double > &,
 bool) const;
 template  double  FullMatrix< double >::matrix_norm_square< double >(const Vector< double > &)
 const;
 template  double  FullMatrix< double >::matrix_scalar_product< double >(const Vector< double > &,
 const Vector< double > &)
 const;
 template void FullMatrix< double >::forward< double >(Vector< double > &, const Vector< double > &)
 const;
 template void FullMatrix< double >::backward< double >(Vector< double > &, const Vector< double > &)
 const;

 template void FullMatrix< double >::precondition_Jacobi< double >(Vector< double > &,
 const Vector< double > &,
 const  double ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
template void FullMatrix< double >::vmult< float >(Vector< float > &,
 const Vector< float > &,
 bool) const;
 template void FullMatrix< double >::Tvmult< float >(Vector< float > &,
 const Vector< float > &,
 bool) const;
 template  float  FullMatrix< double >::matrix_norm_square< float >(const Vector< float > &)
 const;
 template  float  FullMatrix< double >::matrix_scalar_product< float >(const Vector< float > &,
 const Vector< float > &)
 const;
 template void FullMatrix< double >::forward< float >(Vector< float > &, const Vector< float > &)
 const;
 template void FullMatrix< double >::backward< float >(Vector< float > &, const Vector< float > &)
 const;

 template void FullMatrix< double >::precondition_Jacobi< float >(Vector< float > &,
 const Vector< float > &,
 const  double ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
template void FullMatrix< float >::vmult< double >(Vector< double > &,
 const Vector< double > &,
 bool) const;
 template void FullMatrix< float >::Tvmult< double >(Vector< double > &,
 const Vector< double > &,
 bool) const;
 template  double  FullMatrix< float >::matrix_norm_square< double >(const Vector< double > &)
 const;
 template  double  FullMatrix< float >::matrix_scalar_product< double >(const Vector< double > &,
 const Vector< double > &)
 const;
 template void FullMatrix< float >::forward< double >(Vector< double > &, const Vector< double > &)
 const;
 template void FullMatrix< float >::backward< double >(Vector< double > &, const Vector< double > &)
 const;

 template void FullMatrix< float >::precondition_Jacobi< double >(Vector< double > &,
 const Vector< double > &,
 const  float ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
template void FullMatrix< float >::vmult< float >(Vector< float > &,
 const Vector< float > &,
 bool) const;
 template void FullMatrix< float >::Tvmult< float >(Vector< float > &,
 const Vector< float > &,
 bool) const;
 template  float  FullMatrix< float >::matrix_norm_square< float >(const Vector< float > &)
 const;
 template  float  FullMatrix< float >::matrix_scalar_product< float >(const Vector< float > &,
 const Vector< float > &)
 const;
 template void FullMatrix< float >::forward< float >(Vector< float > &, const Vector< float > &)
 const;
 template void FullMatrix< float >::backward< float >(Vector< float > &, const Vector< float > &)
 const;

 template void FullMatrix< float >::precondition_Jacobi< float >(Vector< float > &,
 const Vector< float > &,
 const  float ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
template  double  FullMatrix< double >::residual< double ,  double >(Vector< double > &,
 const Vector< double > &,
 const Vector< double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
template  double  FullMatrix< double >::residual< double ,  float >(Vector< double > &,
 const Vector< double > &,
 const Vector< float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
template  double  FullMatrix< double >::residual< float ,  double >(Vector< float > &,
 const Vector< float > &,
 const Vector< double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
template  double  FullMatrix< double >::residual< float ,  float >(Vector< float > &,
 const Vector< float > &,
 const Vector< float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
template  float  FullMatrix< float >::residual< double ,  double >(Vector< double > &,
 const Vector< double > &,
 const Vector< double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
template  float  FullMatrix< float >::residual< double ,  float >(Vector< double > &,
 const Vector< double > &,
 const Vector< float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
template  float  FullMatrix< float >::residual< float ,  double >(Vector< float > &,
 const Vector< float > &,
 const Vector< double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
template  float  FullMatrix< float >::residual< float ,  float >(Vector< float > &,
 const Vector< float > &,
 const Vector< float > &) const;
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
