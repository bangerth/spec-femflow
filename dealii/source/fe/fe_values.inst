// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#ifndef DOXYGEN
#if (SPLIT_INSTANTIATIONS_CHECK(0))
# if  1  <=  1 
 template class FEValuesBase< 1 ,  1 >;
 template class FEValues< 1 ,  1 >;

 template class FEFaceValuesBase< 1 ,  1 >;
 template class FEFaceValues< 1 ,  1 >;
 template class FESubfaceValues< 1 ,  1 >;


 namespace FEValuesViews
 {
 template class Scalar< 1 ,  1 >;
 template class Vector< 1 ,  1 >;
 template class SymmetricTensor<2,
  1 ,
  1 >;
 template class Tensor<2,  1 ,  1 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 1 ,
  1 >;
 template class FiniteElementRelatedData< 1 ,
  1 >;
 }
 }
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
# if  1  <=  2 
 template class FEValuesBase< 1 ,  2 >;
 template class FEValues< 1 ,  2 >;

 template class FEFaceValuesBase< 1 ,  2 >;
 template class FEFaceValues< 1 ,  2 >;
 template class FESubfaceValues< 1 ,  2 >;


 namespace FEValuesViews
 {
 template class Scalar< 1 ,  2 >;
 template class Vector< 1 ,  2 >;
 template class SymmetricTensor<2,
  1 ,
  2 >;
 template class Tensor<2,  1 ,  2 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 1 ,
  2 >;
 template class FiniteElementRelatedData< 1 ,
  2 >;
 }
 }
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
# if  1  <=  3 
 template class FEValuesBase< 1 ,  3 >;
 template class FEValues< 1 ,  3 >;

 template class FEFaceValuesBase< 1 ,  3 >;
 template class FEFaceValues< 1 ,  3 >;
 template class FESubfaceValues< 1 ,  3 >;


 namespace FEValuesViews
 {
 template class Scalar< 1 ,  3 >;
 template class Vector< 1 ,  3 >;
 template class SymmetricTensor<2,
  1 ,
  3 >;
 template class Tensor<2,  1 ,  3 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 1 ,
  3 >;
 template class FiniteElementRelatedData< 1 ,
  3 >;
 }
 }
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
# if  2  <=  1 
 template class FEValuesBase< 2 ,  1 >;
 template class FEValues< 2 ,  1 >;

 template class FEFaceValuesBase< 2 ,  1 >;
 template class FEFaceValues< 2 ,  1 >;
 template class FESubfaceValues< 2 ,  1 >;


 namespace FEValuesViews
 {
 template class Scalar< 2 ,  1 >;
 template class Vector< 2 ,  1 >;
 template class SymmetricTensor<2,
  2 ,
  1 >;
 template class Tensor<2,  2 ,  1 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 2 ,
  1 >;
 template class FiniteElementRelatedData< 2 ,
  1 >;
 }
 }
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
# if  2  <=  2 
 template class FEValuesBase< 2 ,  2 >;
 template class FEValues< 2 ,  2 >;

 template class FEFaceValuesBase< 2 ,  2 >;
 template class FEFaceValues< 2 ,  2 >;
 template class FESubfaceValues< 2 ,  2 >;


 namespace FEValuesViews
 {
 template class Scalar< 2 ,  2 >;
 template class Vector< 2 ,  2 >;
 template class SymmetricTensor<2,
  2 ,
  2 >;
 template class Tensor<2,  2 ,  2 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 2 ,
  2 >;
 template class FiniteElementRelatedData< 2 ,
  2 >;
 }
 }
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
# if  2  <=  3 
 template class FEValuesBase< 2 ,  3 >;
 template class FEValues< 2 ,  3 >;

 template class FEFaceValuesBase< 2 ,  3 >;
 template class FEFaceValues< 2 ,  3 >;
 template class FESubfaceValues< 2 ,  3 >;


 namespace FEValuesViews
 {
 template class Scalar< 2 ,  3 >;
 template class Vector< 2 ,  3 >;
 template class SymmetricTensor<2,
  2 ,
  3 >;
 template class Tensor<2,  2 ,  3 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 2 ,
  3 >;
 template class FiniteElementRelatedData< 2 ,
  3 >;
 }
 }
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
# if  3  <=  1 
 template class FEValuesBase< 3 ,  1 >;
 template class FEValues< 3 ,  1 >;

 template class FEFaceValuesBase< 3 ,  1 >;
 template class FEFaceValues< 3 ,  1 >;
 template class FESubfaceValues< 3 ,  1 >;


 namespace FEValuesViews
 {
 template class Scalar< 3 ,  1 >;
 template class Vector< 3 ,  1 >;
 template class SymmetricTensor<2,
  3 ,
  1 >;
 template class Tensor<2,  3 ,  1 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 3 ,
  1 >;
 template class FiniteElementRelatedData< 3 ,
  1 >;
 }
 }
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
# if  3  <=  2 
 template class FEValuesBase< 3 ,  2 >;
 template class FEValues< 3 ,  2 >;

 template class FEFaceValuesBase< 3 ,  2 >;
 template class FEFaceValues< 3 ,  2 >;
 template class FESubfaceValues< 3 ,  2 >;


 namespace FEValuesViews
 {
 template class Scalar< 3 ,  2 >;
 template class Vector< 3 ,  2 >;
 template class SymmetricTensor<2,
  3 ,
  2 >;
 template class Tensor<2,  3 ,  2 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 3 ,
  2 >;
 template class FiniteElementRelatedData< 3 ,
  2 >;
 }
 }
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
# if  3  <=  3 
 template class FEValuesBase< 3 ,  3 >;
 template class FEValues< 3 ,  3 >;

 template class FEFaceValuesBase< 3 ,  3 >;
 template class FEFaceValues< 3 ,  3 >;
 template class FESubfaceValues< 3 ,  3 >;


 namespace FEValuesViews
 {
 template class Scalar< 3 ,  3 >;
 template class Vector< 3 ,  3 >;
 template class SymmetricTensor<2,
  3 ,
  3 >;
 template class Tensor<2,  3 ,  3 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 3 ,
  3 >;
 template class FiniteElementRelatedData< 3 ,
  3 >;
 }
 }
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
# if  1  <=  1 
 template void FEValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &);
 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &);

 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
# if  1  <=  1 
 template void FEValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &);
 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &);

 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
# if  1  <=  2 
 template void FEValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &);
 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &);

 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
# if  1  <=  2 
 template void FEValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &);
 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &);

 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
# if  1  <=  3 
 template void FEValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &);
 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &);

 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
# if  1  <=  3 
 template void FEValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &);
 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &);

 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
# if  2  <=  1 
 template void FEValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &);
 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &);

 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
# if  2  <=  1 
 template void FEValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &);
 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &);

 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
# if  2  <=  2 
 template void FEValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &);
 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &);

 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
# if  2  <=  2 
 template void FEValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &);
 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &);

 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
# if  2  <=  3 
 template void FEValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &);
 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &);

 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
# if  2  <=  3 
 template void FEValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &);
 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &);

 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
# if  3  <=  1 
 template void FEValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &);
 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &);

 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
# if  3  <=  1 
 template void FEValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &);
 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &);

 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
# if  3  <=  2 
 template void FEValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &);
 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &);

 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
# if  3  <=  2 
 template void FEValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &);
 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &);

 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
# if  3  <=  3 
 template void FEValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &);
 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &);

 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
# if  3  <=  3 
 template void FEValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &);
 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &);

 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &);
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(90))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(91))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(92))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(93))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(94))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(95))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(96))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(97))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(98))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(99))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(100))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(101))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(102))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(103))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(104))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(105))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(106))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(107))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(108))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(109))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(110))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(111))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(112))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(113))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(114))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(115))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(116))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(117))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(118))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(119))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(120))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(121))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(122))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(123))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(124))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(125))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(126))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(127))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(128))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(129))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(130))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(131))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(132))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(133))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(134))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(135))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(136))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(137))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(138))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(139))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(140))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(141))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(142))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(143))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(144))
# if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(145))
# if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(146))
# if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(147))
# if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(148))
# if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(149))
# if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(150))
# if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(151))
# if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(152))
# if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(153))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(154))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(155))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(156))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(157))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(158))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(159))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(160))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(161))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(162))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(163))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(164))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(165))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(166))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(167))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(168))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(169))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(170))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(171))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(172))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(173))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(174))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(175))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(176))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(177))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(178))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(179))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(180))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(181))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(182))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(183))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(184))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(185))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(186))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(187))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(188))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(189))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(190))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(191))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(192))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(193))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(194))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(195))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(196))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(197))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(198))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(199))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(200))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(201))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(202))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(203))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(204))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(205))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(206))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(207))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(208))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(209))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(210))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(211))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(212))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(213))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(214))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(215))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(216))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(217))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(218))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(219))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(220))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(221))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(222))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(223))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(224))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(225))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(226))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(227))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(228))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(229))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(230))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(231))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(232))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(233))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(234))
# if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(235))
# if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(236))
# if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(237))
# if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(238))
# if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(239))
# if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(240))
# if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(241))
# if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(242))
# if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

# endif
 
#endif
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
