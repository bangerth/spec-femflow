// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
  Vector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
  Vector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
  BlockVector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
  BlockVector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
namespace FETools
 {
#if  1  ==  1 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
  Vector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
  Vector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
  BlockVector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
  BlockVector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
namespace FETools
 {
#if  1  ==  2 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
  Vector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
  Vector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
  BlockVector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
  BlockVector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
namespace FETools
 {
#if  1  ==  3 
 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 extrapolate< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
  Vector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
  Vector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
  BlockVector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
  BlockVector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
namespace FETools
 {
#if  2  ==  1 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
  Vector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
  Vector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
  BlockVector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
  BlockVector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
namespace FETools
 {
#if  2  ==  2 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
  Vector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
  Vector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
  BlockVector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
  BlockVector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
namespace FETools
 {
#if  2  ==  3 
 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 extrapolate< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
  Vector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
  Vector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
  BlockVector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
  BlockVector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
namespace FETools
 {
#if  3  ==  1 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
  Vector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
  Vector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
  BlockVector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
  BlockVector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
namespace FETools
 {
#if  3  ==  2 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
  Vector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
  Vector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
  BlockVector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
  BlockVector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
namespace FETools
 {
#if  3  ==  3 
 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 extrapolate< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
