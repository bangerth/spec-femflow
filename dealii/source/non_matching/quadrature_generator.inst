// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace NonMatching
 {
 template class QuadratureGenerator< 1 >;
 template class DiscreteQuadratureGenerator< 1 >;

#if 1 <  1 
 template class FaceQuadratureGenerator< 1 >;
#endif
 template class DiscreteFaceQuadratureGenerator< 1 >;

 namespace internal
 {
 namespace QuadratureGeneratorImplementation
 {
 template struct FunctionBounds< 1 >;

 template std::pair<double, double>
 find_extreme_values(
 const std::vector<FunctionBounds< 1 >> &);

 template Definiteness
 pointwise_definiteness(
 const std::vector<
 std::reference_wrapper<const Function< 1 >>> &,
 const Point< 1 > &);

 template void
 estimate_function_bounds(
 const std::vector<
 std::reference_wrapper<const Function< 1 >>> &,
 const BoundingBox< 1 > &,
 std::vector<FunctionBounds< 1 >> &);




#if 1 <  1 
 template std_cxx17::optional<HeightDirectionData>
 find_best_height_direction(
 const std::vector<FunctionBounds< 1 >> &);
#endif

 template void
 map_quadrature_to_box(const Quadrature< 1 > &,
 const BoundingBox< 1 > &,
 ExtendableQuadrature< 1 > &);

 template void
 tensor_point_with_1D_quadrature(
 const Point< 1  - 1> &,
 const double,
 const Quadrature<1> &,
 const double,
 const double,
 const unsigned int,
 ExtendableQuadrature< 1 > &q);
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace NonMatching
 {
 template class QuadratureGenerator< 2 >;
 template class DiscreteQuadratureGenerator< 2 >;

#if 1 <  2 
 template class FaceQuadratureGenerator< 2 >;
#endif
 template class DiscreteFaceQuadratureGenerator< 2 >;

 namespace internal
 {
 namespace QuadratureGeneratorImplementation
 {
 template struct FunctionBounds< 2 >;

 template std::pair<double, double>
 find_extreme_values(
 const std::vector<FunctionBounds< 2 >> &);

 template Definiteness
 pointwise_definiteness(
 const std::vector<
 std::reference_wrapper<const Function< 2 >>> &,
 const Point< 2 > &);

 template void
 estimate_function_bounds(
 const std::vector<
 std::reference_wrapper<const Function< 2 >>> &,
 const BoundingBox< 2 > &,
 std::vector<FunctionBounds< 2 >> &);




#if 1 <  2 
 template std_cxx17::optional<HeightDirectionData>
 find_best_height_direction(
 const std::vector<FunctionBounds< 2 >> &);
#endif

 template void
 map_quadrature_to_box(const Quadrature< 2 > &,
 const BoundingBox< 2 > &,
 ExtendableQuadrature< 2 > &);

 template void
 tensor_point_with_1D_quadrature(
 const Point< 2  - 1> &,
 const double,
 const Quadrature<1> &,
 const double,
 const double,
 const unsigned int,
 ExtendableQuadrature< 2 > &q);
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace NonMatching
 {
 template class QuadratureGenerator< 3 >;
 template class DiscreteQuadratureGenerator< 3 >;

#if 1 <  3 
 template class FaceQuadratureGenerator< 3 >;
#endif
 template class DiscreteFaceQuadratureGenerator< 3 >;

 namespace internal
 {
 namespace QuadratureGeneratorImplementation
 {
 template struct FunctionBounds< 3 >;

 template std::pair<double, double>
 find_extreme_values(
 const std::vector<FunctionBounds< 3 >> &);

 template Definiteness
 pointwise_definiteness(
 const std::vector<
 std::reference_wrapper<const Function< 3 >>> &,
 const Point< 3 > &);

 template void
 estimate_function_bounds(
 const std::vector<
 std::reference_wrapper<const Function< 3 >>> &,
 const BoundingBox< 3 > &,
 std::vector<FunctionBounds< 3 >> &);




#if 1 <  3 
 template std_cxx17::optional<HeightDirectionData>
 find_best_height_direction(
 const std::vector<FunctionBounds< 3 >> &);
#endif

 template void
 map_quadrature_to_box(const Quadrature< 3 > &,
 const BoundingBox< 3 > &,
 ExtendableQuadrature< 3 > &);

 template void
 tensor_point_with_1D_quadrature(
 const Point< 3  - 1> &,
 const double,
 const Quadrature<1> &,
 const double,
 const double,
 const unsigned int,
 ExtendableQuadrature< 3 > &q);
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if 1 <  1 
 template class NonMatching::internal::QuadratureGeneratorImplementation::
 UpThroughDimensionCreator< 1 ,  1 >;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if 1 <  1 
 template class NonMatching::internal::QuadratureGeneratorImplementation::
 UpThroughDimensionCreator< 1 ,  2 >;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if 1 <  1 
 template class NonMatching::internal::QuadratureGeneratorImplementation::
 UpThroughDimensionCreator< 1 ,  3 >;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if 1 <  2 
 template class NonMatching::internal::QuadratureGeneratorImplementation::
 UpThroughDimensionCreator< 2 ,  1 >;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if 1 <  2 
 template class NonMatching::internal::QuadratureGeneratorImplementation::
 UpThroughDimensionCreator< 2 ,  2 >;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if 1 <  2 
 template class NonMatching::internal::QuadratureGeneratorImplementation::
 UpThroughDimensionCreator< 2 ,  3 >;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if 1 <  3 
 template class NonMatching::internal::QuadratureGeneratorImplementation::
 UpThroughDimensionCreator< 3 ,  1 >;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if 1 <  3 
 template class NonMatching::internal::QuadratureGeneratorImplementation::
 UpThroughDimensionCreator< 3 ,  2 >;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if 1 <  3 
 template class NonMatching::internal::QuadratureGeneratorImplementation::
 UpThroughDimensionCreator< 3 ,  3 >;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
template NonMatching::DiscreteQuadratureGenerator< 1 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 1 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
template NonMatching::DiscreteQuadratureGenerator< 2 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 2 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
template NonMatching::DiscreteQuadratureGenerator< 3 >::
 DiscreteQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const AdditionalData &);

 template NonMatching::DiscreteFaceQuadratureGenerator< 3 >::
 DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const AdditionalData &);
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
